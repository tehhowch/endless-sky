# The purpose of this workflow is to inspect available toolchains for compatibility.
# This workflow runs on a cron job, because compatibility errors do not prevent the
# game from being built or run using the official toolchains -- our standard CI/CD
# pipeline has that job. Instead, we're looking for things such as upcoming language
# changes, modifications of the standard library, etc. that may impact distribution
# to other platforms.

name: Toolchain Compatibility Check

# TODO:
# - Run a matrix of MinGW versions
# - Run a matrix of GCC versions
# - Run a matrix of clang versions


on:
  push: # testing only
  schedule:
    # Every Friday at 12:00 GMT
    - cron:  '0 12 * * 5'

jobs:

  build_ubuntu:
    name: G++ Compat
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      matrix:
        cfg:
          - { os: ubuntu-16.04, gcc: 5 }
          - { os: ubuntu-16.04, gcc: 7 }
          - { os: ubuntu-16.04, gcc: 8 }
          - { os: ubuntu-16.04, gcc: 9 }
          - { os: ubuntu-18.04, gcc: 7 }
          - { os: ubuntu-18.04, gcc: 8 }
          - { os: ubuntu-18.04, gcc: 9 }
          - { os: ubuntu-18.04, gcc: 10 }
          - { os: ubuntu-20.04, gcc: 7 }
          - { os: ubuntu-20.04, gcc: 8 }
          - { os: ubuntu-20.04, gcc: 9 }
          - { os: ubuntu-20.04, gcc: 10 }
    env:
        CCACHE_DIR: ./ccache/
        CXX: ccache g++
        AR: gcc-ar
        RANLIB: gcc-ranlib
    steps:
    - uses: actions/checkout@v2
    - name: Search for actions runner env version
      env:
        RUNNER_CTX: ${{ toJSON(runner) }}
      run: echo "${RUNNER_CTX}"
    - name: Install development dependencies
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev scons ccache
    - name: Set target compiler
      env:
        GCC_V: ${{ matrix.cfg.gcc }}
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${GCC_V} 100
        update-alternatives --set gcc "/usr/bin/gcc-${GCC_V}"
        update-alternatives --set g++ "/usr/bin/g++-${GCC_V}"
    - name: Print toolchain versions
      run: |
        g++ -v
        gcc-ar --version
        gcc-ranlib --version
        ld -v
    - name: Cache ccache results
      uses: actions/cache@v2
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ matrix.cfg.os }}-${{ matrix.cfg.gcc }}-ccache-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ matrix.cfg.os }}-${{ matrix.cfg.gcc }}-ccache-${{ github.repository }}-${{ github.ref }}-
          ${{ matrix.cfg.os }}-${{ matrix.cfg.gcc }}-ccache-${{ github.repository }}-
          ${{ matrix.cfg.os }}-${{ matrix.cfg.gcc }}-ccache-
    - name: Compile
      run: scons -Qj $(nproc);

  # test_ubuntu-unit:
  #   needs: build_ubuntu
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04]
  #   env:
  #       CCACHE_DIR: ./ccache/
  #       CXX: ccache g++
  #       AR: gcc-ar
  #       RANLIB: gcc-ranlib
  #       TEST_BINARY: tests/endless-sky-tests
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Restore cached test binary
  #     id: cache-tests
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.TEST_BINARY }}
  #       # Rebuild the test binary if source code changed, test code changed, or if instructions on building the game changed.
  #       key: ${{ matrix.os }}-tests-${{ hashFiles('source/**', 'tests/src/**', 'tests/include/**') }}-${{ hashFiles('SConstruct', '.github/workflows/ci.yml') }}
  #   - name: 'Install dependencies'
  #     run: |
  #       sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail # Speed up installation and get rid of unwanted lists
  #       sudo apt-get update
  #       sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev scons ccache
  #   - name: Cache ccache results
  #     if: steps.cache-tests.outputs.cache-hit != 'true'
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.CCACHE_DIR }}
  #       key: ${{ matrix.os }}-ccache-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
  #       restore-keys: |
  #         ${{ matrix.os }}-ccache-${{ github.repository }}-${{ github.ref }}-
  #         ${{ matrix.os }}-ccache-${{ github.repository }}-
  #         ${{ matrix.os }}-ccache-
  #   - name: Compile tests
  #     if: steps.cache-tests.outputs.cache-hit != 'true'
  #     run: scons -Qj $(nproc) build-tests
  #   - name: Run tests
  #     run: scons -Qj $(nproc) test
  #   - name: Run benchmarks
  #     run: ./tests/endless-sky-tests [!benchmark]


  # build_windows:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-latest]
  #   env:
  #       SCCACHE_DIR: ./sccache/
  #       DIR_MINGW64: C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32
  #       DIR_ESLIB: dev64
  #       CXX: sccache g++
  #       ARTIFACT: EndlessSky.exe
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Restore cached game binary
  #     id: cache-artifact
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.ARTIFACT }}
  #       # Rebuild the game binary if source code changed, or if instructions on building the game changed.
  #       key: ${{ matrix.os }}-artifact-${{ hashFiles('source/**') }}-${{ hashFiles('.winmake', '.github/workflows/ci.yml') }}
  #   - name: Install sccache
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     run: choco install sccache
  #   - name: Install development dependencies
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     run: |
  #       Invoke-WebRequest https://endless-sky.github.io/win64-dev.zip -OutFile win64-dev.zip
  #       Expand-Archive win64-dev.zip -DestinationPath . -Force
  #       Remove-Item win64-dev.zip
  #   - name: Cache sccache results
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.SCCACHE_DIR }}
  #       key: ${{ matrix.os }}-sccache-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
  #       restore-keys: |
  #         ${{ matrix.os }}-sccache-${{ github.repository }}-${{ github.ref }}-
  #         ${{ matrix.os }}-sccache-${{ github.repository }}-
  #         ${{ matrix.os }}-sccache
  #   - name: Compile
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     run: make -re -j ($(Get-CIMInstance -Class 'CIM_Processor').NumberOfLogicalProcessors) -f .winmake
  #   - name: Prepare game binary
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     run: COPY .\bin\pkgd\release\endless-sky.exe EndlessSky.exe
  #   - name: Upload game binary
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: binary-${{ matrix.os }}
  #       path: ${{ env.ARTIFACT }}

  # test_windows-unit:
  #   needs: build_windows
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-latest]
  #   env:
  #       SCCACHE_DIR: ./sccache/
  #       DIR_MINGW64: C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32
  #       DIR_ESLIB: .\dev64
  #       CXX: sccache g++
  #       TEST_BINARY: .\tests\endless-sky-tests.exe
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Restore cached test binary
  #     id: cache-tests
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.TEST_BINARY }}
  #       # Rebuild the test binary if source code changed, test code changed, or if instructions on building the game changed.
  #       key: ${{ matrix.os }}-tests-${{ hashFiles('source/**', 'tests/src/**', 'tests/include/**') }}-${{ hashFiles('.winmake', '.github/workflows/ci.yml') }}
  #   - name: Install development dependencies
  #     if: steps.cache-tests.outputs.cache-hit != 'true'
  #     run: choco install sccache
  #   - name: Fetch precompiled libraries
  #     run: |
  #       Invoke-WebRequest https://endless-sky.github.io/win64-dev.zip -OutFile win64-dev.zip
  #       Expand-Archive win64-dev.zip -DestinationPath . -Force
  #       Remove-Item win64-dev.zip
  #       COPY ".\dev64\bin\*.dll" .
  #       COPY $Env:DIR_MINGW64\lib\libgcc_s_seh-1.dll .
  #       COPY $Env:DIR_MINGW64\lib\libstdc++-6.dll .
  #       COPY $Env:DIR_MINGW64\lib\libwinpthread-1.dll .
  #   - name: Cache sccache results
  #     if: steps.cache-tests.outputs.cache-hit != 'true'
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.SCCACHE_DIR }}
  #       key: ${{ matrix.os }}-sccache-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
  #       restore-keys: |
  #         ${{ matrix.os }}-sccache-${{ github.repository }}-${{ github.ref }}-
  #         ${{ matrix.os }}-sccache-${{ github.repository }}-
  #         ${{ matrix.os }}-sccache
  #   - name: Compile tests
  #     if: steps.cache-tests.outputs.cache-hit != 'true'
  #     run: make -re -j ($(Get-CIMInstance -Class 'CIM_Processor').NumberOfLogicalProcessors) -f .winmake build-tests
  #   - name: Run tests
  #     run: ${{ env.TEST_BINARY }} -r compact
  #   - name: Run benchmarks
  #     run: ${{ env.TEST_BINARY }} [!benchmark]


  # build_macos:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-latest]
  #   env:
  #     ARTIFACT: Endless Sky
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Restore cached game binary
  #     id: cache-artifact
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.ARTIFACT }}
  #       key: ${{ matrix.os }}-artifacts-${{ hashFiles('source/**') }}-${{ hashFiles('.github/workflows/ci.yml', 'EndlessSky.xcodeproj/**') }} # Any of these files will trigger a rebuild
  #   - name: Update Homebrew
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     run: brew update
  #   - name: Install dependencies
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     run: brew install libpng libjpeg-turbo libmad sdl2
  #   - name: Compile
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     run: xcodebuild -configuration "Release" -jobs $(sysctl -n hw.logicalcpu) -quiet
  #   - name: Prepare game binary
  #     if: steps.cache-artifact.outputs.cache-hit != 'true'
  #     run: mv "build/Release/Endless Sky.app/Contents/MacOS/Endless Sky" .
  #   - name: Upload game binary
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: binary-${{ matrix.os }}
  #       path: ${{ env.ARTIFACT }}
